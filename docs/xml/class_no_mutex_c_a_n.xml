<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="class_no_mutex_c_a_n" kind="class" language="C++" prot="public">
    <compoundname>NoMutexCAN</compoundname>
    <basecompoundref prot="public" virt="non-virtual">CAN</basecompoundref>
    <includes refid="_no_mutex_c_a_n_8h" local="no">NoMutexCAN.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_no_mutex_c_a_n_1acd0e6a2877c46d2c31fd08d8ae98fd42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NoMutexCAN::NoMutexCAN</definition>
        <argsstring>(PinName rd, PinName td)</argsstring>
        <name>NoMutexCAN</name>
        <qualifiedname>NoMutexCAN::NoMutexCAN</qualifiedname>
        <param>
          <type>PinName</type>
          <declname>rd</declname>
        </param>
        <param>
          <type>PinName</type>
          <declname>td</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/NoMutexCAN/NoMutexCAN.h" line="40" column="3" bodyfile="lib/NoMutexCAN/NoMutexCAN.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_no_mutex_c_a_n_1a5e4c8dd42ede5c3c7aed5149eb1af214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NoMutexCAN::NoMutexCAN</definition>
        <argsstring>(PinName rd, PinName td, int hz)</argsstring>
        <name>NoMutexCAN</name>
        <qualifiedname>NoMutexCAN::NoMutexCAN</qualifiedname>
        <param>
          <type>PinName</type>
          <declname>rd</declname>
        </param>
        <param>
          <type>PinName</type>
          <declname>td</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/NoMutexCAN/NoMutexCAN.h" line="41" column="3" bodyfile="lib/NoMutexCAN/NoMutexCAN.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_no_mutex_c_a_n_1acfd94c2e4acc7c5963254f9280ec9aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual NoMutexCAN::~NoMutexCAN</definition>
        <argsstring>()</argsstring>
        <name>~NoMutexCAN</name>
        <qualifiedname>NoMutexCAN::~NoMutexCAN</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/NoMutexCAN/NoMutexCAN.h" line="42" column="11" bodyfile="lib/NoMutexCAN/NoMutexCAN.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_no_mutex_c_a_n_1ad2cedc74343700fa8dac2988a8e315e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NoMutexCAN::lock</definition>
        <argsstring>() override</argsstring>
        <name>lock</name>
        <qualifiedname>NoMutexCAN::lock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/NoMutexCAN/NoMutexCAN.h" line="43" column="8" bodyfile="lib/NoMutexCAN/NoMutexCAN.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_no_mutex_c_a_n_1a1f537c5cf689a212cf0845e52f8d2150" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NoMutexCAN::unlock</definition>
        <argsstring>() override</argsstring>
        <name>unlock</name>
        <qualifiedname>NoMutexCAN::unlock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/NoMutexCAN/NoMutexCAN.h" line="44" column="8" bodyfile="lib/NoMutexCAN/NoMutexCAN.h" bodystart="44" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class der overskriver mutex <ref refid="class_no_mutex_c_a_n_1ad2cedc74343700fa8dac2988a8e315e7" kindref="member">lock()</ref> og <ref refid="class_no_mutex_c_a_n_1a1f537c5cf689a212cf0845e52f8d2150" kindref="member">unlock()</ref> i Mbed. Disse er overflødige ved nucleo STM32 boards. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Det er overflødig at bruge denne overskrivelse da vi bruger ISR deferred handlers, så handlers ikke bliver kørt i ISR kontekst længere. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CAN</label>
      </node>
      <node id="1">
        <label>NoMutexCAN</label>
        <link refid="class_no_mutex_c_a_n"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>CAN</label>
      </node>
      <node id="1">
        <label>NoMutexCAN</label>
        <link refid="class_no_mutex_c_a_n"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="lib/NoMutexCAN/NoMutexCAN.h" line="38" column="1" bodyfile="lib/NoMutexCAN/NoMutexCAN.h" bodystart="38" bodyend="45"/>
    <listofallmembers>
      <member refid="class_no_mutex_c_a_n_1ad2cedc74343700fa8dac2988a8e315e7" prot="public" virt="non-virtual"><scope>NoMutexCAN</scope><name>lock</name></member>
      <member refid="class_no_mutex_c_a_n_1acd0e6a2877c46d2c31fd08d8ae98fd42" prot="public" virt="non-virtual"><scope>NoMutexCAN</scope><name>NoMutexCAN</name></member>
      <member refid="class_no_mutex_c_a_n_1a5e4c8dd42ede5c3c7aed5149eb1af214" prot="public" virt="non-virtual"><scope>NoMutexCAN</scope><name>NoMutexCAN</name></member>
      <member refid="class_no_mutex_c_a_n_1a1f537c5cf689a212cf0845e52f8d2150" prot="public" virt="non-virtual"><scope>NoMutexCAN</scope><name>unlock</name></member>
      <member refid="class_no_mutex_c_a_n_1acfd94c2e4acc7c5963254f9280ec9aa4" prot="public" virt="virtual"><scope>NoMutexCAN</scope><name>~NoMutexCAN</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
